#!/usr/bin/env bash

BASH_ONERROR_source_main() {
  if [[ -v BASH_ONERROR_BASE_VARIABLE_DATA_FILEPATH ]]; then
    return
  fi

  # if set +e is enabled, script will be exited after trapped
  builtin set +e
  # NOTE: enable trap in function
  # builtin set -E

  BASH_ONERROR_BASE_VARIABLE_DATA_FILEPATH="$(mktemp "/tmp/$(basename $0).$$.tmp.XXXXXX")"
  (
    builtin set -o posix
    builtin set
  ) >"$BASH_ONERROR_BASE_VARIABLE_DATA_FILEPATH"

  if builtin set -o | grep -q 'xtrace.*on'; then
    BASH_ONERROR_XTRACE_OPT_FLAG="on"
  fi

  trap 'BASH_ONERROR_onerror "$LINENO" "$?"' ERR
}

BASH_ONERROR_onerror_help() {
  echo "$(basename "$0") <bash file> <args>" 1>&2
  echo "$(basename "$0") [bash options...] -- <bash file> <args>" 1>&2
}

BASH_ONERROR_onerror_main() {
  local this_script_path="$(cd $(dirname $0) && pwd)/$(basename $0)"
  local default_argn="$#"
  local end_offset=0
  local bash_args=()
  if [[ ! -e $1 ]]; then
    for arg in "$@"; do
      if [[ $arg == "--" ]]; then
        bash_args=(${@:1:$end_offset})
        shift $(($end_offset + 1))
        break
      fi
      ((end_offset++))
    done
  fi
  if [[ $# -lt 1 ]] || [[ "$end_offset" == "$default_argn" ]]; then
    BASH_ONERROR_onerror_help
    return 1
  fi

  local target_file="$1"
  shift 1

  # NOTE: first line is maybe 'source xxxx #!/bin/bash' due to match original source code line number
  # you can set '$0' by using -c option (FYI: see bash manual)
  bash "${bash_args[@]}" -c "$({
    echo -n "source $this_script_path "
    cat "$target_file"
  })" "$target_file" "$@"
}

BASH_ONERROR_readline() {
  (
    shopt -s expand_aliases
    if type rlwrap >/dev/null 2>&1; then
      alias rlwrap='rlwrap'
    else
      alias rlwrap=''
    fi

    local ret
    ret=$(rlwrap bash -c 'read -p "> " -r line; printf '"'"'%s\n'"'"' "$line"')
    printf '%s' "$ret"
  )
}
BASH_ONERROR_onerror() {
  builtin set +x
  # NOTE: why +1?
  local BASH_ONERROR_LINENO_="$(($1 + 1))"
  local BASH_ONERROR_status="$2"
  shift 2

  local BASH_ONERROR_trap_SIGINT_bk
  BASH_ONERROR_trap_SIGINT_bk="$(trap -p SIGINT)"
  if type rlwrap >/dev/null 2>&1; then
    trap '' SIGINT
  else
    trap 'echo ""' SIGINT
  fi

  local BASH_ONERROR_source
  # NOTE: BASH_SOURCE[0] is this script filepath
  if [[ ${#BASH_SOURCE[@]} == 1 ]] || [[ ${#BASH_SOURCE[@]} == 3 && ${BASH_SOURCE[1]} == 'environment' && ${BASH_SOURCE[2]} == 'environment' ]]; then
    BASH_ONERROR_source="$0"
  else
    BASH_ONERROR_source="$BASH_SOURCE"
  fi
  if [[ ! "$BASH_ONERROR_source" =~ ^/ ]]; then
    BASH_ONERROR_source="${DIRSTACK[0]}/$BASH_ONERROR_source"
  fi

  local BASH_ONERROR_CONTEXT_NUM=${BASH_ONERROR_CONTEXT_NUM:-5}
  printf '\033[90m%*s\033[00m\n' "$(tput cols)" '' | tr ' ' "="
  echo 1>&2 -e "\\033[90m[TRAP ERR]\\033[00m"
  echo 1>&2 -e "\\033[35m$BASH_ONERROR_source:$BASH_ONERROR_LINENO_\\033[00m"
  echo 1>&2 -e "\\033[32m[function call stack]: $(echo ${FUNCNAME[@]:1} | rev | sed 's/ /->/g')\\033[00m"
  echo 1>&2 -e "\\033[31m[âœ˜ $BASH_ONERROR_status] $BASH_COMMAND\\033[00m"
  if type >/dev/null 2>&1 'bat'; then
    local BASH_ONERROR_start_line=$(($BASH_ONERROR_LINENO_ - $BASH_ONERROR_CONTEXT_NUM))
    local BASH_ONERROR_end_line=$(($BASH_ONERROR_LINENO_ + $BASH_ONERROR_CONTEXT_NUM))
    BASH_ONERROR_start_line=$(echo -e "0\n$BASH_ONERROR_start_line" | sort -r -g | head -n1)
    bat --style=plain --pager=never -n --line-range "$BASH_ONERROR_start_line:$BASH_ONERROR_end_line" --highlight-line $BASH_ONERROR_LINENO_ "$BASH_ONERROR_source"
  else
    cat -n "$BASH_ONERROR_source" | grep --color=always -C $BASH_ONERROR_CONTEXT_NUM '^ *'"$BASH_ONERROR_LINENO_"'\s.*$'
  fi

  echo 1>&2 -e "\\033[92m[new variables]\\033[00m"
  echo 1>&2 -ne "\\033[92m"
  diff -c "$BASH_ONERROR_BASE_VARIABLE_DATA_FILEPATH" <(
    builtin set -o posix
    builtin set
  ) | grep '^+' | grep -E -v '^\+ (COLUMNS|LINENO|LINES|FUNCNAME|BASH_ONERROR_|BASH_)'
  echo 1>&2 -ne "\\033[00m"

  echo 1>&2 -e "\\033[93m[prompt command]: <bash command>, q|exit|quit, c|continue\\033[00m"
  echo 1>&2 -e "\\033[94m[wd] $(pwd)\\033[00m"
  printf '\033[90m%*s\033[00m\n' "$(tput cols)" '' | tr ' ' "="

  local line
  while :; do
    line=$(BASH_ONERROR_readline)
    if [[ "$line" =~ ^(q|exit|quit)$ ]]; then
      exit
    fi
    if [[ "$line" =~ ^(c|continue)$ ]]; then
      break
    fi
    if [[ -n "$line" ]]; then
      eval "$line" || true
    fi
  done

  [[ -n "$BASH_ONERROR_trap_SIGINT_bk" ]] && eval "$BASH_ONERROR_trap_SIGINT_bk"
  if [[ "$BASH_ONERROR_XTRACE_OPT_FLAG" == "on" ]]; then
    builtin set -x
  fi
  return 0
}

# NOTE: force set +e function
set() {
  builtin set "$@"
  local exit_code=$?
  builtin set +e >/dev/null 2>&1
  return $exit_code
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  BASH_ONERROR_onerror_main "$@"
  exit $?
else
  BASH_ONERROR_source_main "$@"
  return $?
fi
